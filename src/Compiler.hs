{-# LANGUAGE OverloadedStrings #-}

module Compiler
    ( retrieveGitSHACompiler
    , retrieveGitMessageCompiler
    , getSrcPath
    , pandocMathCompiler
    , renderPandocMath
    , pandocCustomCompiler
    , customWriterOptions
    , customReaderOptions
--    , writerOptionsWithToc
    ) where

--------------------------------------------------------------------------------
import           Hakyll.Core.Compiler            (unsafeCompiler, Compiler)
import           Hakyll.Core.Identifier          (toFilePath, Identifier)
import           Hakyll.Core.Item                (itemIdentifier, Item)
import           Hakyll.Core.Configuration       (providerDirectory)
import           Hakyll.Web.Html                 (toUrl)
import           Hakyll.Web.Pandoc

import           Text.Pandoc
import           Text.Pandoc.Shared              (eastAsianLineBreakFilter)

--import           Data.Text                      ( Text )
--import           Data.Functor.Identity          ( runIdentity )

import           Configuration

import           System.Process
import           System.FilePath                 ( (</>), (<.>), combine
                                                 , splitFileName
                                                 , takeDirectory )
--------------------------------------------------------------------------------

-- Reference
--     readProcess
--         :: FilePath   -- ^ Filename of the executable
--         -> [String]   -- ^ any arguments
--         -> String     -- ^ standard input
--         -> IO String  -- ^ stdout

retrieveGitSHACompiler :: Item a -> Compiler String
retrieveGitSHACompiler item = unsafeCompiler $ do
    gitLog "%h" (getSrcPath item)


retrieveGitMessageCompiler :: Item a -> Compiler String
retrieveGitMessageCompiler item = unsafeCompiler $ do
    gitLog "%s" (getSrcPath item)

getSrcPath :: Item a -> FilePath
getSrcPath = (\x -> combine (providerDirectory configuration) x ) . toFilePath . itemIdentifier

--------------------------------------------------------------------------------
gitLog :: String    -- ^ git log format
       -> FilePath  -- ^ path of the post
       -> IO String -- ^ output of git log
gitLog format path =
    readProcess "git" ["log", "-1", "HEAD", "--pretty=format:" ++ format, path] ""
--------------------------------------------------------------------------------

-- | Borrowed from https://github.com/bgamari/writing/blob/master/hakyll.hs
-- compatible with Pandoc >= 2.0
-- see also https://stackoverflow.com/a/51500296/2929058
pandocMathCompiler :: Compiler (Item String)
pandocMathCompiler = pandocCompilerWith customReaderOptions customWriterOptions

renderPandocMath :: Item String -> Compiler (Item String)
renderPandocMath = renderPandocWith customReaderOptions customWriterOptions

pandocCustomCompiler :: Compiler (Item String)
pandocCustomCompiler = pandocCompilerWithTransform customReaderOptions
    customWriterOptions eastAsianLineBreakFilter

-- | Table of contents should be treated differently from other contents like
-- MathJax or LiveJs. For example `$if(toc)$ $toc$ $endif$` in the templete,
-- check if the the field `toc` exists or not. The content of `toc`
-- can be generated by pandoc -- as we wish, depending on the metadata field.
-- There are some solutions around the internet.
-- 1. Use two writerOptions, one for those with TOC, one for those without.
--    In the compiler, check the medatafiled, and decide which compiler to use.
--    One drawback is that, for the writerOptions with TOC turned on, one has
--    to speicify a templete, which is a string, e.g., `$toc$ $body` rather
--    than a file path. It is then not very convinient to customize the
--    postition or style of the output. Every time I want to chang the layout,
--    I have to recompile the site generator.
-- 2. Another option is also to use to writerOptions. However, the one with TOC
--    is used to generate TOC only, with template set to `$toc`. Then save this
--    content as a context monoid. Then load this context to generate the file
--    output. This idea is similar to that described in
--        <https://github.com/jgm/pandoc/wiki/Pandoc-Tricks#template-snippet>
--    The drawback of this approch is that, each post is processed twice, once
--    for the TOC, once for the content. Hence this extend the processing
--    times.
-- 3. Another solution may be using a filter.
customWriterOptions :: WriterOptions
customWriterOptions = defaultHakyllWriterOptions
    { writerHTMLMathMethod = MathJax ""
    , writerHighlightStyle = Nothing
    , writerTableOfContents = True
    , writerTOCDepth = 2
--    , writerTemplate = Just tocTemplate
    }

-- The extension `Ext_east_asian_line_breaks` does not work.
-- References:
--     1. https://github.com/jgm/pandoc/pull/4674/commits/4012dd75f30f888c7915f4874072b26c61d810a0 
--
customReaderOptions :: ReaderOptions
customReaderOptions = defaultHakyllReaderOptions
    { readerExtensions = pandocExtensions <>
                         extensionsFromList
                         [ Ext_tex_math_single_backslash ]
    }

--------------------------------------------------------------------------------

-- | Recnernces:
-- 1. argumatronic.com/posts/2018-01-16-pandoc-toc.html
-- 2. peter.colberg.org/site#table-of-contents
-- 3. jip.dev/posts/the-switch-to-hakyll/#table-of-contents
-- 4. scr.stunts.hu/hakyll.html
-- 5. svejcar.dev/posts/2019/11/27/table-of-contents-in-hakyll/
-- 6. blog.ysndr.de/posts/internals/2020-03-22-built-with-hakyll-part-2.html
-- 7. github.com/jtanguy/julien.jhome.fr-old/blob/master/posts/2013-05-14-adding-toc-to-posts.md
-- 8. jaspervdj.be/hakyll/tutorials/06-versions.html

-- writerOptionsWithToc :: WriterOptions
-- writerOptionsWithToc = customWriterOptions
--                        { writerTableOfContents = True
--                        , writerTOCDepth = 2
--                        , writerTemplate = Just "Contents\n$toc$\n$body$"
--                        }
--
-- tocTemplate :: Template Text
-- tocTemplate = case runIdentity $ compileTemplate "" tmpl of
--   Left  err      -> error err
--   Right template -> template
--  where
--   tmpl
--     = "\n<div class=\"toc\"><div class=\"header\">Table of Contents</div>\n$toc$\n</div>\n$body$"
